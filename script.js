"use strict";
//////////////////////////////Password Generator//////////////////////////////
/*
1. The app will store the elements of the HTML page into constants
2. The app uses 3 user defined functions (genPassword, arrayLowHigh, syncValue);
	- syncValue : syncs the value of the range input slider and the number input
	- arrayLowHigh: generates and array with the first_element = low and the last_element = high and with increment of 1 (e.g. low=1 high=5 =>  array = [1],[2],[3],[4],[5]) this function is used to generate the list of ascii codes for each of the charadters needed in the genPassword function
	- genPassword: this is the main function that will generate the password, it has 4 arguments all of them obtained from user-inputs on the html page:
			+this function creates a variable "charCodes" that by default contains the array with ascii codes for lowercase letters, if the user has checked any of the boxes then the speicified arrays of ascii codes will be concatenated to this variable;
			+then the function will create an empty array called passwordCharacters and will go through a for loop that starts at 0 and stops at the user speifed ammount (the lenght of the password) for each iteration of this loop a random item (generated by Math.floor(Math.random() * charCodes.length)) from the array charCodes will be added into the passwordCharaters array.
			+finally the function will return the password in a string , this si done by converting the values in the array to their coresponnding ascii character (passwordCharacters.join(""))
*/
/////////////////////////////////////////////////////////////////////////////////
const ammountRangeEL = document.getElementById("rangeAmmount");
const ammountNumberEL = document.getElementById("numberAmmount");
const isUpperEL = document.getElementById("isUppercase");
const isNumbersEL = document.getElementById("isNumbers");
const isSymbolsEL = document.getElementById("isSymbols");
const formEL = document.getElementById("passGenForm");
let passwordFinal = document.getElementById("finalPassword");

const upperCharCodes = arrayLowHigh(65, 90);
const lowerCharCodes = arrayLowHigh(97, 122);
const numbersCharCodes = arrayLowHigh(48, 57);
const symbolsCharCodes = arrayLowHigh(33, 47)
	.concat(arrayLowHigh(58, 64))
	.concat(arrayLowHigh(91, 96))
	.concat(arrayLowHigh(123, 126));

ammountNumberEL.addEventListener("input", syncValue);
ammountRangeEL.addEventListener("input", syncValue);

formEL.addEventListener("submit", (e) => {
	e.preventDefault();
	const ammount = ammountNumberEL.value;
	const upper = isUpperEL.checked;
	const numbers = isNumbersEL.checked;
	const symbols = isSymbolsEL.checked;

	const password = genPassword(ammount, upper, numbers, symbols);
	passwordFinal.innerText = password;
});

function genPassword(ammount, upper, numbers, symbols) {
	let charCodes = lowerCharCodes;
	if (upper) charCodes = charCodes.concat(upperCharCodes);
	if (numbers) charCodes = charCodes.concat(numbersCharCodes);
	if (symbols) charCodes = charCodes.concat(symbolsCharCodes);

	const passwordCharacters = [];
	for (let i = 0; i < ammount; i++) {
		const charater = charCodes[Math.floor(Math.random() * charCodes.length)];
		passwordCharacters.push(String.fromCharCode(charater));
	}
	return passwordCharacters.join("");
}

function arrayLowHigh(low, high) {
	const array = [];
	for (let i = low; i <= high; i++) {
		array.push(i);
	}
	return array;
}
function syncValue(e) {
	const value = e.target.value;
	ammountNumberEL.value = value;
	ammountRangeEL.value = value;
}

//////////////////////////////Div-Mover//////////////////////////////
/*
TBD 

*/

const moveElm = document.querySelector(".container");
let offsetX;
let offsetY;
let mouse_down = false;
let rangeSliderActive = false;

moveElm.addEventListener("mousedown", function (e) {
	if (e.target === ammountRangeEL) {
		rangeSliderActive = true;
		return;
	}

	mouse_down = true;
	offsetX = e.clientX - moveElm.offsetLeft;
	offsetY = e.clientY - moveElm.offsetTop;
});

window.addEventListener("mousemove", function (e) {
	if (rangeSliderActive || (!mouse_down && e.target === ammountRangeEL)) {
		return;
	}
	if (mouse_down) {
		const X = e.clientX - offsetX;
		const Y = e.clientY - offsetY;

		moveElm.style.left = X + "px";
		moveElm.style.top = Y + "px";
	}
});

window.addEventListener("mouseup", function () {
	mouse_down = false;
	rangeSliderActive = false;
});
